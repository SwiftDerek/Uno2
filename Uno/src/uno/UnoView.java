/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uno;

/**
* Class to handle the GUI of the program.
* (Requirement 1.0.0)
*/

import java.awt.Dimension;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

public class UnoView extends javax.swing.JFrame {

    public UnoController controller;
    public JLabel[] labelArray = new JLabel[26];
    public UnoCard[] currentHand = new UnoCard[26];
    public int cardNumber = 0;
    /**
     * Creates new form UnoView.
     * (Requirement 1.1.0)
     * (Requirement 1.2.0)
     */
    public UnoView() {
        initComponents();
        setLabelArray();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        start = new javax.swing.JButton();
        help = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        player1Label = new javax.swing.JLabel();
        player2Label = new javax.swing.JLabel();
        player3Label = new javax.swing.JLabel();
        player4Label = new javax.swing.JLabel();
        unoButton = new javax.swing.JButton();
        currentPlayerLabel = new javax.swing.JLabel();
        endTurnButton = new javax.swing.JButton();
        drawButton = new javax.swing.JButton();
        currentPlayerHand = new javax.swing.JPanel();
        card2 = new javax.swing.JLabel();
        card3 = new javax.swing.JLabel();
        card5 = new javax.swing.JLabel();
        card6 = new javax.swing.JLabel();
        card7 = new javax.swing.JLabel();
        card8 = new javax.swing.JLabel();
        card9 = new javax.swing.JLabel();
        card10 = new javax.swing.JLabel();
        card11 = new javax.swing.JLabel();
        card12 = new javax.swing.JLabel();
        card13 = new javax.swing.JLabel();
        card4 = new javax.swing.JLabel();
        card14 = new javax.swing.JLabel();
        card15 = new javax.swing.JLabel();
        card16 = new javax.swing.JLabel();
        card17 = new javax.swing.JLabel();
        card18 = new javax.swing.JLabel();
        card19 = new javax.swing.JLabel();
        card20 = new javax.swing.JLabel();
        card21 = new javax.swing.JLabel();
        card22 = new javax.swing.JLabel();
        card23 = new javax.swing.JLabel();
        card24 = new javax.swing.JLabel();
        card25 = new javax.swing.JLabel();
        card26 = new javax.swing.JLabel();
        card1 = new javax.swing.JLabel();
        deckPile = new javax.swing.JPanel();
        discardPile = new javax.swing.JPanel();
        topOfDiscardPile = new javax.swing.JLabel();
        catchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        start.setText("Start");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        help.setText("Help");
        help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpActionPerformed(evt);
            }
        });

        unoButton.setText("UNO!");
        unoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unoButtonActionPerformed(evt);
            }
        });

        endTurnButton.setText("End Turn");
        endTurnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endTurnButtonActionPerformed(evt);
            }
        });

        drawButton.setText("Draw");
        drawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawButtonActionPerformed(evt);
            }
        });

        card2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card2MouseClicked(evt);
            }
        });

        card3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card3MouseClicked(evt);
            }
        });

        card5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card5MouseClicked(evt);
            }
        });

        card6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card6MouseClicked(evt);
            }
        });

        card7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card7MouseClicked(evt);
            }
        });

        card8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card8MouseClicked(evt);
            }
        });

        card9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card9MouseClicked(evt);
            }
        });

        card10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card10MouseClicked(evt);
            }
        });

        card11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card11MouseClicked(evt);
            }
        });

        card12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card12MouseClicked(evt);
            }
        });

        card13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card13MouseClicked(evt);
            }
        });

        card4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card4MouseClicked(evt);
            }
        });

        card14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card14MouseClicked(evt);
            }
        });

        card15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card15MouseClicked(evt);
            }
        });

        card16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card16MouseClicked(evt);
            }
        });

        card17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card17MouseClicked(evt);
            }
        });

        card18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card18MouseClicked(evt);
            }
        });

        card19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card19MouseClicked(evt);
            }
        });

        card20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card20MouseClicked(evt);
            }
        });

        card21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card21MouseClicked(evt);
            }
        });

        card22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card22MouseClicked(evt);
            }
        });

        card23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card23MouseClicked(evt);
            }
        });

        card24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card24.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card24MouseClicked(evt);
            }
        });

        card25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card25.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card25MouseClicked(evt);
            }
        });

        card26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card26.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card26MouseClicked(evt);
            }
        });

        card1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N
        card1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout currentPlayerHandLayout = new javax.swing.GroupLayout(currentPlayerHand);
        currentPlayerHand.setLayout(currentPlayerHandLayout);
        currentPlayerHandLayout.setHorizontalGroup(
            currentPlayerHandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currentPlayerHandLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(card1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card10, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card11, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card12, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card13, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(currentPlayerHandLayout.createSequentialGroup()
                .addComponent(card14, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card15, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card16, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card17, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card18, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card19, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card20, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card21, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card22, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card23, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card24, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card25, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(card26, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        currentPlayerHandLayout.setVerticalGroup(
            currentPlayerHandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currentPlayerHandLayout.createSequentialGroup()
                .addGroup(currentPlayerHandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(currentPlayerHandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(card2)
                        .addComponent(card3)
                        .addComponent(card5)
                        .addComponent(card6)
                        .addComponent(card7)
                        .addComponent(card8)
                        .addComponent(card9)
                        .addComponent(card10)
                        .addComponent(card11)
                        .addComponent(card12)
                        .addComponent(card13)
                        .addComponent(card4))
                    .addComponent(card1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(currentPlayerHandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(card14)
                    .addComponent(card15)
                    .addComponent(card16)
                    .addComponent(card17)
                    .addComponent(card18)
                    .addComponent(card19)
                    .addComponent(card20)
                    .addComponent(card21)
                    .addComponent(card22)
                    .addComponent(card23)
                    .addComponent(card24)
                    .addComponent(card25)
                    .addComponent(card26))
                .addContainerGap())
        );

        javax.swing.GroupLayout deckPileLayout = new javax.swing.GroupLayout(deckPile);
        deckPile.setLayout(deckPileLayout);
        deckPileLayout.setHorizontalGroup(
            deckPileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 158, Short.MAX_VALUE)
        );
        deckPileLayout.setVerticalGroup(
            deckPileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 164, Short.MAX_VALUE)
        );

        topOfDiscardPile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uno/images/Blue0.JPG"))); // NOI18N

        javax.swing.GroupLayout discardPileLayout = new javax.swing.GroupLayout(discardPile);
        discardPile.setLayout(discardPileLayout);
        discardPileLayout.setHorizontalGroup(
            discardPileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 157, Short.MAX_VALUE)
            .addGroup(discardPileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(discardPileLayout.createSequentialGroup()
                    .addGap(58, 58, 58)
                    .addComponent(topOfDiscardPile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(59, Short.MAX_VALUE)))
        );
        discardPileLayout.setVerticalGroup(
            discardPileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 164, Short.MAX_VALUE)
            .addGroup(discardPileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(discardPileLayout.createSequentialGroup()
                    .addGap(50, 50, 50)
                    .addComponent(topOfDiscardPile)
                    .addContainerGap(51, Short.MAX_VALUE)))
        );

        catchButton.setText("Catch");
        catchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                catchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(endTurnButton, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                            .addComponent(drawButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deckPile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(discardPile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(player2Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(player1Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(player3Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(player4Label, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE))
                                    .addComponent(unoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(137, 137, 137)
                                .addComponent(catchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(45, 45, 45))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(currentPlayerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(397, 397, 397))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(currentPlayerHand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(player1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(player2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(player3Label, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(player4Label, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(catchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 24, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(endTurnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(drawButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20))
                            .addComponent(discardPile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deckPile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(27, 27, 27)
                .addComponent(currentPlayerHand, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(currentPlayerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(321, 321, 321)
                .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(help, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(help, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
    * Method for "Start/Restart" button to start the game and determine
    * amount of players.
    * (Requirement 1.2.1)
    * (Requirement 1.2.3)
    */
    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
            Integer[] options = {2,3,4};
            int numPlayers = JOptionPane.showOptionDialog(this,
            "How many players?",
            "Uno Card Game",
            JOptionPane.YES_NO_CANCEL_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[0]);

            if (numPlayers != JOptionPane.CLOSED_OPTION){
                switch (numPlayers) {
                    case 0:
                    numPlayers = 2;
                    break;
                    case 1:
                    numPlayers = 3;
                    break;
                    default:
                    numPlayers = 4;
                    break;
                }
                start.setText("Restart");
                controller.setNumPlayers(numPlayers);
            }
    }//GEN-LAST:event_startActionPerformed

    /**
    * Method for "Help" button to show rules of the game.
    * (Requirement 1.2.2)
    */
    private void helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpActionPerformed
        JOptionPane.showMessageDialog(null, "To Start game press the Start Button.\n"
                + "To Restart game press the Restart Button after Start has been pressed.\n"
                + "\n"
                + "The objective of UNO is to hold only one card and declare UNO to win the game.\n"
                + "-Players can only discard one card per turn and the discarded card has to match the color or number of the top card in the discard pile.\n"
                + "-There are special cards that change the flow of the game: \n"
                + "-Reverse changes direction of the players\n"
                + "-Skip skips the next player\n"
                + "-Draw 2 causes the next player to draw 2 and skips their turn\n"
                + "-The Wild cards allow the player to pick a color and the Wild Draw 4 also causes the next player to draw 4 and skip their turn.", "Uno Help", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_helpActionPerformed

    /**
    * Method for "UNO" button to check if player has UNO
    * (Requirement 1.3.1)
    */
    private void unoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unoButtonActionPerformed
           if (controller.checkUNO()){
               JOptionPane.showMessageDialog(null, "You have UNO!", "Congratulations", JOptionPane.INFORMATION_MESSAGE);
           } else {
               JOptionPane.showMessageDialog(null, "You do not have UNO!", "Sorry", JOptionPane.ERROR_MESSAGE);
           }
    }//GEN-LAST:event_unoButtonActionPerformed

    /**
    * Method for "End Turn" button to end current player turn.
    *
    */
    private void endTurnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endTurnButtonActionPerformed
        controller.endTurn();
    }//GEN-LAST:event_endTurnButtonActionPerformed

    /**
    * Method for "Draw Card" button to have current player draw.
    * (Requirement 1.3.2)
    */
    private void drawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawButtonActionPerformed
        controller.draw();
    }//GEN-LAST:event_drawButtonActionPerformed

    /**
    * Method to have player discard any card in hand.
    * (Requirement 1.3.3)
    */
    private void card1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card1MouseClicked
        setDiscardPile(getImage(currentHand[0]));
        cardNumber = 0;
        controller.discardCard(currentHand[0]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card1MouseClicked

    private void card2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card2MouseClicked
        setDiscardPile(getImage(currentHand[1]));
        cardNumber = 1;
        controller.discardCard(currentHand[1]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card2MouseClicked

    private void card3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card3MouseClicked
        setDiscardPile(getImage(currentHand[2]));
        cardNumber = 2;
        controller.discardCard(currentHand[2]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card3MouseClicked

    private void card4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card4MouseClicked
        setDiscardPile(getImage(currentHand[3]));
        cardNumber = 3;
        controller.discardCard(currentHand[3]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card4MouseClicked

    private void card5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card5MouseClicked
        setDiscardPile(getImage(currentHand[4]));
        cardNumber = 4;
        controller.discardCard(currentHand[4]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card5MouseClicked

    private void card6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card6MouseClicked
        setDiscardPile(getImage(currentHand[5]));
        cardNumber = 5;
        controller.discardCard(currentHand[5]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card6MouseClicked

    private void card7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card7MouseClicked
        setDiscardPile(getImage(currentHand[6]));
        cardNumber = 6;
        controller.discardCard(currentHand[6]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card7MouseClicked

    private void card8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card8MouseClicked
        setDiscardPile(getImage(currentHand[7]));
        cardNumber = 7;
        controller.discardCard(currentHand[7]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card8MouseClicked

    private void card9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card9MouseClicked
        setDiscardPile(getImage(currentHand[8]));
        cardNumber = 8;
        controller.discardCard(currentHand[8]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card9MouseClicked

    private void card10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card10MouseClicked
        setDiscardPile(getImage(currentHand[9]));
        cardNumber = 9;
        controller.discardCard(currentHand[9]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card10MouseClicked

    private void card11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card11MouseClicked
        setDiscardPile(getImage(currentHand[10]));
        cardNumber = 10;
        controller.discardCard(currentHand[10]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card11MouseClicked

    private void card12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card12MouseClicked
        setDiscardPile(getImage(currentHand[11]));
        cardNumber = 11;
        controller.discardCard(currentHand[11]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card12MouseClicked

    private void card13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card13MouseClicked
        setDiscardPile(getImage(currentHand[12]));
        cardNumber = 12;
        controller.discardCard(currentHand[12]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card13MouseClicked

    private void card14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card14MouseClicked
        setDiscardPile(getImage(currentHand[13]));
        cardNumber = 13;
        controller.discardCard(currentHand[13]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card14MouseClicked

    private void card15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card15MouseClicked
        setDiscardPile(getImage(currentHand[14]));
        cardNumber = 14;
        controller.discardCard(currentHand[14]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card15MouseClicked

    private void card16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card16MouseClicked
        setDiscardPile(getImage(currentHand[15]));
        cardNumber = 15;
        controller.discardCard(currentHand[15]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card16MouseClicked

    private void card17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card17MouseClicked
        setDiscardPile(getImage(currentHand[16]));
        cardNumber = 16;
        controller.discardCard(currentHand[16]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card17MouseClicked

    private void card18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card18MouseClicked
        setDiscardPile(getImage(currentHand[17]));
        cardNumber = 17;
        controller.discardCard(currentHand[17]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card18MouseClicked

    private void card19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card19MouseClicked
        setDiscardPile(getImage(currentHand[18]));
        cardNumber = 18;
        controller.discardCard(currentHand[18]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card19MouseClicked

    private void card20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card20MouseClicked
        setDiscardPile(getImage(currentHand[19]));
        cardNumber = 19;
        controller.discardCard(currentHand[19]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card20MouseClicked

    private void card21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card21MouseClicked
        setDiscardPile(getImage(currentHand[20]));
        cardNumber = 20;
        controller.discardCard(currentHand[20]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card21MouseClicked

    private void card22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card22MouseClicked
        setDiscardPile(getImage(currentHand[21]));
        cardNumber = 21;
        controller.discardCard(currentHand[21]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card22MouseClicked

    private void card23MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card23MouseClicked
        setDiscardPile(getImage(currentHand[22]));
        cardNumber = 22;
        controller.discardCard(currentHand[22]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card23MouseClicked

    private void card24MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card24MouseClicked
        setDiscardPile(getImage(currentHand[23]));
        cardNumber = 23;
        controller.discardCard(currentHand[23]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card24MouseClicked

    private void card25MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card25MouseClicked
        setDiscardPile(getImage(currentHand[24]));
        cardNumber = 24;
        controller.discardCard(currentHand[24]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card25MouseClicked

    private void card26MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card26MouseClicked
        setDiscardPile(getImage(currentHand[25]));
        cardNumber = 25;
        controller.discardCard(currentHand[25]);
        if (controller.invalidPlay() || controller.invalidPlayTwo()){
            setDiscardPile(getImage(controller.getTopOfDeck()));
        }
    }//GEN-LAST:event_card26MouseClicked

    /**
    * Method for "Catch" button to catch player who didn't call UNO.
    * (Requirement 1.3.4)
    */
    private void catchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_catchButtonActionPerformed
        if(controller.firstStatus() == true)
            JOptionPane.showMessageDialog(null, "You caught player 1.", "Congratulations", JOptionPane.INFORMATION_MESSAGE);
        if(controller.secondStatus() == true)
            JOptionPane.showMessageDialog(null, "You caught player 2.", "Congratulations", JOptionPane.INFORMATION_MESSAGE);
        if(controller.thirdStatus() == true)
            JOptionPane.showMessageDialog(null, "You caught player 3.", "Congratulations", JOptionPane.INFORMATION_MESSAGE);
        if(controller.fourthStatus() == true)
            JOptionPane.showMessageDialog(null, "You caught player 4.", "Congratulations", JOptionPane.INFORMATION_MESSAGE);
        if(controller.firstStatus() == false && controller.secondStatus() == false && controller.thirdStatus() == false && controller.fourthStatus() == false)
            JOptionPane.showMessageDialog(null, "There was no one to catch.", "Sorry", JOptionPane.INFORMATION_MESSAGE);
        controller.checkMissedUNO();
    }//GEN-LAST:event_catchButtonActionPerformed
    
    /**
    * Methods to display information about player hand size.
    * (Requirement 1.5.0)
    */
    public void setPlayers1Label(int handSize){
        player1Label.setText("Player " + 1 + ":  " + handSize + " cards");
    }
    
    public void setPlayers2Label(int handSize){
        player2Label.setText("Player " + 2 + ":  " + handSize + " cards");
    }
    
    public void setPlayers3Label(int handSize){
        player3Label.setText("Player " + 3 + ":  " + handSize + " cards");
    }
    
    public void setPlayers4Label(int handSize){
        player4Label.setText("Player " + 4 + ":  " + handSize + " cards");
    }
    
    public void clearPlayersLabel(){
        player3Label.setText("");
        player4Label.setText("");
    }
    
    public void setController(UnoController controller){
        this.controller = controller;
    }
    
    public void hidePanel(){
        this.jPanel1.setVisible(false);
    }
    
    public void showPanel(){
        this.jPanel1.setVisible(true);
    }
    
    public void hideDrawButton(){
        this.drawButton.setVisible(false);
        this.endTurnButton.setVisible(true);
    }
    
    public void showDrawButton(){
        this.drawButton.setVisible(true);
        this.endTurnButton.setVisible(false);
    }
    
    public void hideCards(){
        this.card1.setVisible(false);
        this.card2.setVisible(false);
        this.card3.setVisible(false);
        this.card4.setVisible(false);
        this.card5.setVisible(false);
        this.card6.setVisible(false);
        this.card7.setVisible(false);
        this.card8.setVisible(false);
        this.card9.setVisible(false);
        this.card10.setVisible(false);
        this.card11.setVisible(false);
        this.card12.setVisible(false);
        this.card13.setVisible(false);
        this.card14.setVisible(false);
        this.card15.setVisible(false);
        this.card16.setVisible(false);
        this.card17.setVisible(false);
        this.card18.setVisible(false);
        this.card19.setVisible(false);
        this.card20.setVisible(false);
        this.card21.setVisible(false);
        this.card22.setVisible(false);
        this.card23.setVisible(false);
        this.card24.setVisible(false);
        this.card25.setVisible(false);
        this.card26.setVisible(false);
    }
    
    public void setCurrentPlayerLabel(int currentPlayer){
        currentPlayerLabel.setText("Player " + (currentPlayer + 1));
    }
    
    public void displayHandCards(){
        controller.displayHandCards();
    }
    
    public void clearDiscardPile(){
        topOfDiscardPile.setVisible(false);
    }
    
    /**
    * Method to display card pictures.
    * (Requirement 1.4.0)
    */
    public ImageIcon getImage(UnoCard card){
        
        ImageIcon image;
        String location = "";
        
        if(card instanceof UnoNumber){
            if("blue".equals(card.getColor())){
                switch (((UnoNumber) card).getNumber()) {
                    case 0:
                        location = "images/Blue0.JPG";
                        break;
                    case 1:
                        location = "images/Blue1.JPG";
                        break;
                    case 2:
                        location = "images/Blue2.JPG";
                        break;
                    case 3:
                        location = "images/Blue3.JPG";
                        break;
                    case 4:
                        location = "images/Blue4.JPG";
                        break;
                    case 5:
                        location = "images/Blue5.JPG";
                        break;
                    case 6:
                        location = "images/Blue6.JPG";
                        break;
                    case 7:
                        location = "images/Blue7.JPG";
                        break;
                    case 8:
                        location = "images/Blue8.JPG";
                        break;
                    default:
                        location = "images/Blue9.JPG";
                        break;
                }
            } else if ("green".equals(card.getColor())){
                switch (((UnoNumber) card).getNumber()) {
                    case 0:
                        location = "images/Green0.JPG";
                        break;
                    case 1:
                        location = "images/Green1.JPG";
                        break;
                    case 2:
                        location = "images/Green2.JPG";
                        break;
                    case 3:
                        location = "images/Green3.JPG";
                        break;
                    case 4:
                        location = "images/Green4.JPG";
                        break;
                    case 5:
                        location = "images/Green5.JPG";
                        break;
                    case 6:
                        location = "images/Green6.JPG";
                        break;
                    case 7:
                        location = "images/Green7.JPG";
                        break;
                    case 8:
                        location = "images/Green8.JPG";
                        break;
                    default:
                        location = "images/Green9.JPG";
                        break;
                }
            } else if ("red".equals(card.getColor())){
                switch (((UnoNumber) card).getNumber()) {
                    case 0:
                        location = "images/Red0.png";
                        break;
                    case 1:
                        location = "images/Red1.JPG";
                        break;
                    case 2:
                        location = "images/Red2.JPG";
                        break;
                    case 3:
                        location = "images/Red3.JPG";
                        break;
                    case 4:
                        location = "images/Red4.JPG";
                        break;
                    case 5:
                        location = "images/Red5.JPG";
                        break;
                    case 6:
                        location = "images/Red6.JPG";
                        break;
                    case 7:
                        location = "images/Red7.JPG";
                        break;
                    case 8:
                        location = "images/Red8.JPG";
                        break;
                    default:
                        location = "images/Red9.JPG";
                        break;
                }
            } else if ("yellow".equals(card.getColor())){
                switch (((UnoNumber) card).getNumber()) {
                    case 0:
                        location = "images/Yellow0.JPG";
                        break;
                    case 1:
                        location = "images/Yellow1.JPG";
                        break;
                    case 2:
                        location = "images/Yellow2.JPG";
                        break;
                    case 3:
                        location = "images/Yellow3.JPG";
                        break;
                    case 4:
                        location = "images/Yellow4.JPG";
                        break;
                    case 5:
                        location = "images/Yellow5.JPG";
                        break;
                    case 6:
                        location = "images/Yellow6.JPG";
                        break;
                    case 7:
                        location = "images/Yellow7.JPG";
                        break;
                    case 8:
                        location = "images/Yellow8.JPG";
                        break;
                    default:
                        location = "images/Yellow9.JPG";
                        break;
                }
            }
        } else if (card instanceof UnoWild){
            location = "images/Wild.JPG";
        } else if (card instanceof UnoWildDraw){
            location = "images/WildDraw4.JPG";
        } else if (card instanceof UnoSkip){
            if("blue".equals(card.getColor())){
                location = "images/BlueSkip.JPG";
            } else if ("green".equals(card.getColor())){
                location = "images/GreenSkip.JPG";
            } else if ("red".equals(card.getColor())){
                location = "images/RedSkip.JPG";
            } else {
                location = "images/YellowSkip.JPG";
            }
        } else if (card instanceof UnoReverse){
            if("blue".equals(card.getColor())){
                location = "images/BlueReverse.JPG";
            } else if ("green".equals(card.getColor())){
                location = "images/GreenReverse.JPG";
            } else if ("red".equals(card.getColor())){
                location = "images/RedReverse.JPG";
            } else {
                location = "images/YellowReverse.JPG";
            }
        } else {
            if("blue".equals(card.getColor())){
                location = "images/BlueDraw2.JPG";
            } else if ("green".equals(card.getColor())){
                location = "images/GreenDraw2.JPG";
            } else if ("red".equals(card.getColor())){
                location = "images/RedDraw2.JPG";
            } else {
                location = "images/YellowDraw2.JPG";
            }
        }
        image = new javax.swing.ImageIcon(getClass().getResource("/uno/" + location));
        return image;
    }
    
    public void setDiscardPile(ImageIcon Image){
        topOfDiscardPile.setIcon(Image);
    }
    
    public String chooseColor(){
        String color = "";
        
        String[] colors = {"red", "yellow", "blue", "green"};
        int colorOptions;
        do {
                colorOptions = JOptionPane.showOptionDialog(this,
                "Choose a color",
                "Wild Card",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                colors,
                colors[0]);
        } while (colorOptions == JOptionPane.CLOSED_OPTION);

        switch (colorOptions) {
            case 0:
            color = "red";
            break;
            case 1:
            color = "yellow";
            break;
            case 2:
            color = "blue";
            break;
            default:
            color = "green";
            break;
        }
        
        return color;
    }
    
    public int getCardNumber(){
        return cardNumber;
    }
    
    public void setLabelArray(){
        labelArray[0] = card1;
        labelArray[1] = card2;
        labelArray[2] = card3;
        labelArray[3] = card4;
        labelArray[4] = card5;
        labelArray[5] = card6;
        labelArray[6] = card7;
        labelArray[7] = card8;
        labelArray[8] = card9;
        labelArray[9] = card10;
        labelArray[10] = card11;
        labelArray[11] = card12;
        labelArray[12] = card13;
        labelArray[13] = card14;
        labelArray[14] = card15;
        labelArray[15] = card16;
        labelArray[16] = card17;
        labelArray[17] = card18;
        labelArray[18] = card19;
        labelArray[19] = card20;
        labelArray[20] = card21;
        labelArray[21] = card22;
        labelArray[22] = card23;
        labelArray[23] = card24;
        labelArray[24] = card25;
        labelArray[25] = card26;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel card1;
    private javax.swing.JLabel card10;
    private javax.swing.JLabel card11;
    private javax.swing.JLabel card12;
    private javax.swing.JLabel card13;
    private javax.swing.JLabel card14;
    private javax.swing.JLabel card15;
    private javax.swing.JLabel card16;
    private javax.swing.JLabel card17;
    private javax.swing.JLabel card18;
    private javax.swing.JLabel card19;
    private javax.swing.JLabel card2;
    private javax.swing.JLabel card20;
    private javax.swing.JLabel card21;
    private javax.swing.JLabel card22;
    private javax.swing.JLabel card23;
    private javax.swing.JLabel card24;
    private javax.swing.JLabel card25;
    private javax.swing.JLabel card26;
    private javax.swing.JLabel card3;
    private javax.swing.JLabel card4;
    private javax.swing.JLabel card5;
    private javax.swing.JLabel card6;
    private javax.swing.JLabel card7;
    private javax.swing.JLabel card8;
    private javax.swing.JLabel card9;
    private javax.swing.JButton catchButton;
    private javax.swing.JPanel currentPlayerHand;
    private javax.swing.JLabel currentPlayerLabel;
    private javax.swing.JPanel deckPile;
    private javax.swing.JPanel discardPile;
    private javax.swing.JButton drawButton;
    private javax.swing.JButton endTurnButton;
    private javax.swing.JButton help;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel player1Label;
    private javax.swing.JLabel player2Label;
    private javax.swing.JLabel player3Label;
    private javax.swing.JLabel player4Label;
    private javax.swing.JButton start;
    private javax.swing.JLabel topOfDiscardPile;
    private javax.swing.JButton unoButton;
    // End of variables declaration//GEN-END:variables
}
